// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package ports

import (
	"sync"
)

// Ensure, that GreeterServiceMock does implement GreeterService.
// If this is not the case, regenerate this file with moq.
var _ GreeterService = &GreeterServiceMock{}

// GreeterServiceMock is a mock implementation of GreeterService.
//
// 	func TestSomethingThatUsesGreeterService(t *testing.T) {
//
// 		// make and configure a mocked GreeterService
// 		mockedGreeterService := &GreeterServiceMock{
// 			GreetFunc: func(name string) (string, error) {
// 				panic("mock out the Greet method")
// 			},
// 		}
//
// 		// use mockedGreeterService in code that requires GreeterService
// 		// and then make assertions.
//
// 	}
type GreeterServiceMock struct {
	// GreetFunc mocks the Greet method.
	GreetFunc func(name string) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// Greet holds details about calls to the Greet method.
		Greet []struct {
			// Name is the name argument value.
			Name string
		}
	}
	lockGreet sync.RWMutex
}

// Greet calls GreetFunc.
func (mock *GreeterServiceMock) Greet(name string) (string, error) {
	if mock.GreetFunc == nil {
		panic("GreeterServiceMock.GreetFunc: method is nil but GreeterService.Greet was just called")
	}
	callInfo := struct {
		Name string
	}{
		Name: name,
	}
	mock.lockGreet.Lock()
	mock.calls.Greet = append(mock.calls.Greet, callInfo)
	mock.lockGreet.Unlock()
	return mock.GreetFunc(name)
}

// GreetCalls gets all the calls that were made to Greet.
// Check the length with:
//     len(mockedGreeterService.GreetCalls())
func (mock *GreeterServiceMock) GreetCalls() []struct {
	Name string
} {
	var calls []struct {
		Name string
	}
	mock.lockGreet.RLock()
	calls = mock.calls.Greet
	mock.lockGreet.RUnlock()
	return calls
}
